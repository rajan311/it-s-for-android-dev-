 how to create a space to store PDFs in your Android app, save the PDF titled "SQL Injection Attacks and Defense," and then retrieve and display it within your application.

1. Setting Up the Project
Step 1: Create a New Android Project
Open Android Studio.
Click on File > New > New Project.
Choose Empty Activity and click Next.
Name your project (e.g., PDFStorageApp), choose a save location, select Kotlin as the language, and set the Minimum API level.
Click Finish.
2. Adding Dependencies
Step 2: Add PDF Viewing Library
To display PDFs in your app, add a dependency for the android-pdf-viewer library. This library allows you to display PDF files easily.

Open the build.gradle file at the app level (usually app/build.gradle).
Add the following line under dependencies:
gradle
Copy code
implementation 'com.github.barteksc:android-pdf-viewer:2.8.2'
Click Sync Now to download and integrate the library.
3. Creating Storage Space in Internal Storage
Step 3: Create a Directory to Store PDF Files
You need to create a directory within the app’s internal storage where the PDFs will be saved.

kotlin
Copy code
fun createDirectory(context: Context): File {
    val directory = File(context.filesDir, "MyPDFs") // MyPDFs is the directory name
    if (!directory.exists()) {
        directory.mkdirs() // Create the directory if it doesn't exist
    }
    return directory
}
Explanation: This function checks if a directory named MyPDFs exists in the app's internal storage. If not, it creates one.
4. Saving the PDF File
Step 4: Save the PDF to Internal Storage
You need a function to save the PDF file to the directory you created.

kotlin
Copy code
fun saveFile(context: Context, fileName: String, fileData: ByteArray): File {
    val directory = createDirectory(context)
    val file = File(directory, fileName)
    FileOutputStream(file).use { it.write(fileData) } // Save the file as a byte array
    return file
}

// Example usage (you'll replace `pdfData` with the actual byte array of the PDF file)
val pdfData = ... // ByteArray containing PDF data
val pdfFile = saveFile(context, "SQL_Injection_Attacks_and_Defense.pdf", pdfData)
Explanation: This function takes a file name and the PDF data in ByteArray format and writes it to a file in the MyPDFs directory.
5. Displaying the PDF in the App
Step 5: Set Up the Layout
To display the PDF, you’ll need a PDFView in your layout file.

Open your layout file (activity_main.xml).
Add the following PDFView element:
xml
Copy code
<com.github.barteksc.pdfviewer.PDFView
    android:id="@+id/pdfView"
    android:layout_width="match_parent"
    android:layout_height="match_parent"/>
Step 6: Load and Display the PDF
Now, create a function to load and display the PDF using the PDFView.

kotlin
Copy code
import com.github.barteksc.pdfviewer.PDFView

fun displayPDF(context: Context, pdfView: PDFView, fileName: String) {
    val directory = File(context.filesDir, "MyPDFs")
    val pdfFile = File(directory, fileName)
    if (pdfFile.exists()) {
        pdfView.fromFile(pdfFile).load() // Load the PDF file into the PDFView
    }
}

// Example usage in your MainActivity
val pdfView: PDFView = findViewById(R.id.pdfView)
displayPDF(context, pdfView, "SQL_Injection_Attacks_and_Defense.pdf")
Explanation: This function retrieves the PDF file from the storage and loads it into the PDFView to be displayed on the screen.
6. Putting It All Together
Step 7: Implement in MainActivity
Here's how your MainActivity.kt might look:

kotlin
Copy code
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import com.github.barteksc.pdfviewer.PDFView
import java.io.File
import java.io.FileOutputStream

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val pdfView: PDFView = findViewById(R.id.pdfView)

        // Example: Load your PDF from assets or server, convert it to ByteArray
        val pdfData = ... // Load your PDF data here

        // Save the PDF file
        saveFile(this, "SQL_Injection_Attacks_and_Defense.pdf", pdfData)

        // Display the PDF file
        displayPDF(this, pdfView, "SQL_Injection_Attacks_and_Defense.pdf")
    }

    // Function to create directory
    fun createDirectory(context: Context): File {
        val directory = File(context.filesDir, "MyPDFs")
        if (!directory.exists()) {
            directory.mkdirs()
        }
        return directory
    }

    // Function to save the PDF file
    fun saveFile(context: Context, fileName: String, fileData: ByteArray): File {
        val directory = createDirectory(context)
        val file = File(directory, fileName)
        FileOutputStream(file).use { it.write(fileData) }
        return file
    }

    // Function to display the PDF
    fun displayPDF(context: Context, pdfView: PDFView, fileName: String) {
        val directory = File(context.filesDir, "MyPDFs")
        val pdfFile = File(directory, fileName)
        if (pdfFile.exists()) {
            pdfView.fromFile(pdfFile).load()
        }
    }
}
7. Testing the Application
Step 8: Run Your Application
Run your application on an emulator or physical device.
Ensure that the PDF file is correctly saved to internal storage and that it is displayed in the PDFView.
